version: '3.8'

services:
  typedb-mcp-server-it:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_NAME: typedb-mcp-server # Garante que estamos construindo o binário principal
    ports:
      - "8089" # Docker atribuirá uma porta de host aleatória, mapeada para a porta 8089 do contêiner
    depends_on:
      - typedb-server-it
      - mock-oauth2-server # Adicionada dependência
    networks:
      - typedb_mcp_test_network
    restart: "no"

  typedb-server-it:
    image: typedb/typedb:3.2.0
    environment:
      - TYPEDB_SERVER_OPTS=--server.authentication.enable=false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - typedb_mcp_test_network

  mock-oauth2-server:
    build:
      context: .
      dockerfile: Dockerfile # Assumindo que o Dockerfile do projeto principal pode ser usado ou adaptado
      args:
        APP_NAME: mock-oauth2-server # Nome do binário, se aplicável
    # image: mock-oauth2-server-image # Ou use uma imagem pré-construída se disponível
    ports:
      - "8080" # Docker atribuirá uma porta de host aleatória, mapeada para a porta 8080 do contêiner
    volumes:
      - ./mock_jwks.json:/usr/share/nginx/html/.well-known/jwks.json:ro
      - ./scripts/nginx-mock-oauth2.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - typedb_mcp_test_network
    restart: "no"

networks:
  typedb_mcp_test_network:
    driver: bridge

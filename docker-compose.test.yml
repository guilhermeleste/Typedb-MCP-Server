# docker-compose.test.yml
#
# Arquivo Docker Compose para o ambiente de teste de integração do Typedb-MCP-Server.
# Este arquivo orquestra o Typedb-MCP-Server e suas dependências (TypeDB, Mock OAuth2 Server)
# para permitir testes de integração automatizados.

# Define um bloco de variáveis de ambiente padrão que pode ser reutilizado.
x-default-variables: &default-env
  # MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV:
  #   Variável definida no HOST que especifica o caminho para o arquivo de configuração TOML
  #   a ser usado pelo contêiner do MCP Server. O contêiner receberá uma variável
  #   MCP_CONFIG_PATH com este valor.
  MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV: ${MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV:-/app/test_configs/default.test.toml} # Default para um config genérico
  
  # MCP_TYPEDB__ADDRESS:
  #   Variável DENTRO do contêiner typedb-mcp-server-it, indicando a qual serviço TypeDB se conectar.
  #   Será configurada dinamicamente pelo TestEnvironment.
  MCP_TYPEDB__ADDRESS: ${MCP_TYPEDB__ADDRESS:-typedb-server-it:1729} # Default se não sobrescrito

  # TYPEDB_PASSWORD_TEST: Senha para os serviços TypeDB neste compose.
  TYPEDB_PASSWORD_TEST: ${TYPEDB_PASSWORD_TEST:-password}

  # TLS_ENABLED: Para healthcheck do Dockerfile.
  TLS_ENABLED: ${TLS_ENABLED:-false}
  
  # Variáveis para o script de comando de espera do typedb-mcp-server-it (podem ser simplificadas se o script usar MCP_TYPEDB__ADDRESS)
  timeout_duration: ${timeout_duration:-120} # Segundos
  sleep_interval: ${sleep_interval:-3} # Segundos
  elapsed_time: ${elapsed_time:-0} # Segundos

services:
  # Serviço principal Typedb-MCP-Server para testes de integração.
  typedb-mcp-server-it:
    profiles: ["typedb_default", "typedb_tls", "oauth_mock", "vault_integration"]
    build:
      context: . 
      dockerfile: Dockerfile 
    container_name: ${COMPOSE_PROJECT_NAME}-mcp-server 
    ports:
      - "8788:8787"   # MCP HTTP/WS (Host:Container)
      - "8444:8443"   # MCP HTTPS/WSS (Host:Container) - Usado se server.tlsEnabled=true no TOML
      - "9091:9090"   # Métricas Prometheus (Host:Container)
    volumes:
      - ./tests/test_configs:/app/test_configs:ro
      - ./tests/test_certs:/app/test_certs:ro
    environment:
      # MCP_CONFIG_PATH: Caminho do arquivo TOML DENTRO do contêiner.
      - MCP_CONFIG_PATH=${MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV}
      
      # --- LINHA MODIFICADA PARA LOGS DETALHADOS ---
      - RUST_LOG=${RUST_LOG_MCP:-trace,typedb_mcp_server=trace,axum=trace,hyper=trace,h2=trace,tower=trace,rustls=trace,tokio_rustls=trace}
      
      # Senha para o TypeDB que o SERVIDOR MCP usará para se conectar.
      - TYPEDB_PASSWORD=${TYPEDB_PASSWORD_TEST} # Usa a mesma senha definida para os serviços TypeDB
      
      # Endereço do TypeDB que o SERVIDOR MCP usará para se conectar.
      - MCP_TYPEDB__ADDRESS=${MCP_TYPEDB__ADDRESS} 
      
      # Flag para o HEALTHCHECK no Dockerfile. Definido pelo TestEnvironment.
      - TLS_ENABLED=${TLS_ENABLED}
    secrets:
      - source: mcp_approle_role_id
        target: /run/secrets/mcp_approle_role_id
        mode: 0400
      - source: mcp_approle_secret_id
        target: /run/secrets/mcp_approle_secret_id
        mode: 0400
    
    entrypoint: [] # Sobrescreve entrypoint do Dockerfile
    command: >
      sh -c "
        set -e 
        echo '[DEBUG_MCP_SERVER_CMD] Script de entrada do typedb-mcp-server-it iniciado.'
        echo '[DEBUG_MCP_SERVER_CMD]   MCP_CONFIG_PATH (caminho do TOML) = \"$$MCP_CONFIG_PATH\"'
        echo '[DEBUG_MCP_SERVER_CMD]   TYPEDB_PASSWORD (para o cliente TypeDB interno) = \"$$TYPEDB_PASSWORD\"'
        echo '[DEBUG_MCP_SERVER_CMD]   MCP_TYPEDB__ADDRESS (alvo do TypeDB para este MCP server) = \"$$MCP_TYPEDB__ADDRESS\"'
        echo '[DEBUG_MCP_SERVER_CMD]   RUST_LOG (para o servidor Rust) = \"$$RUST_LOG\"'
        echo '[DEBUG_MCP_SERVER_CMD]   TLS_ENABLED (para healthcheck Dockerfile) = \"$$TLS_ENABLED\"'
        
        # Extrai HOST e PORTA do MCP_TYPEDB__ADDRESS
        TARGET_TYPEDB_HOST=$$(echo \"$$MCP_TYPEDB__ADDRESS\" | cut -d: -f1)
        TARGET_TYPEDB_PORT=$$(echo \"$$MCP_TYPEDB__ADDRESS\" | cut -d: -f2)

        echo \"[DEBUG_MCP_SERVER_CMD] Aguardando ativamente pela porta TCP do TypeDB em '$$TARGET_TYPEDB_HOST:$$TARGET_TYPEDB_PORT'...\"
        
        timeout_duration_val=${timeout_duration:-120} # Usa default se não definido
        elapsed_time_val=0       
        sleep_interval_val=${sleep_interval:-3}

        while [ $$elapsed_time_val -lt $$timeout_duration_val ]; do
          if nc -z -w 2 \"$$TARGET_TYPEDB_HOST\" \"$$TARGET_TYPEDB_PORT\" 2>/dev/null; then
            echo \"[DEBUG_MCP_SERVER_CMD] Porta TCP do TypeDB ('$$TARGET_TYPEDB_HOST:$$TARGET_TYPEDB_PORT') está aberta.\"
            break
          fi
          echo \"[DEBUG_MCP_SERVER_CMD] TypeDB ('$$TARGET_TYPEDB_HOST:$$TARGET_TYPEDB_PORT') ainda não disponível. Aguardando $$sleep_interval_val s... ($$elapsed_time_val/$$timeout_duration_val s)\"
          sleep $$sleep_interval_val
          elapsed_time_val=$$((elapsed_time_val + sleep_interval_val))
        done
        
        if [ $$elapsed_time_val -ge $$timeout_duration_val ]; then
          echo \"[ERROR_MCP_SERVER_CMD] Timeout de $${timeout_duration_val}s atingido ao aguardar TypeDB em '$$TARGET_TYPEDB_HOST:$$TARGET_TYPEDB_PORT'!\" >&2
          exit 1 
        fi
        
        echo \"[DEBUG_MCP_SERVER_CMD] Adicionando delay extra de 7 segundos para garantir que o serviço gRPC interno do TypeDB ('$$TARGET_TYPEDB_HOST:$$TARGET_TYPEDB_PORT') esteja completamente inicializado...\"
        sleep 7 
        
        echo \"[DEBUG_MCP_SERVER_CMD] Iniciando o binário Typedb-MCP-Server ('/usr/local/bin/typedb_mcp_server')...\"
        /usr/local/bin/typedb_mcp_server 
      "
    
    depends_on:
      typedb-server-it:
         condition: service_healthy
    networks:
      - typedb_mcp_test_network

  # Instância do TypeDB Server para testes (sem TLS).
  typedb-server-it:
    profiles: ["typedb_default", "typedb_tls", "oauth_mock"]
    image: typedb/typedb:3.2.0
    container_name: ${COMPOSE_PROJECT_NAME}-typedb
    ports:
      - "1729:1729"
    environment:
      - TYPEDB_SERVER_OPTS=--server.address=0.0.0.0:1729 --server.authentication.enable=true --server.credential.default.password=${TYPEDB_PASSWORD_TEST}
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/1729' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s 
    networks:
      - typedb_mcp_test_network
    volumes:
      - typedb_data_it:/opt/typedb/server/data

  # Instância do TypeDB Server para testes (COM TLS).
  typedb-server-tls-it:
    profiles: ["typedb_tls"]
    image: typedb/typedb:3.2.0
    container_name: ${COMPOSE_PROJECT_NAME}-typedb-tls
    ports:
      - "11730:1729"
    volumes:
      - ./tests/test_certs/typedb-server.crt:/opt/typedb/server/conf/typedb-server.crt:ro
      - ./tests/test_certs/typedb-server.key:/opt/typedb/server/conf/typedb-server.key:ro
      - ./tests/test_certs/rootCA.pem:/opt/typedb/server/conf/rootCA.pem:ro
      - typedb_tls_data_it:/opt/typedb/server/data
    environment:
      - TYPEDB_SERVER_OPTS=--server.address=0.0.0.0:1729 --server.authentication.enable=true --server.credential.default.password=${TYPEDB_PASSWORD_TEST} --server.encryption.enable=all --server.encryption.certificate.path=/opt/typedb/server/conf/typedb-server.crt --server.encryption.private_key.path=/opt/typedb/server/conf/typedb-server.key --server.encryption.ca.path=/opt/typedb/server/conf/rootCA.pem
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/1729' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 35s 
    networks:
      - typedb_mcp_test_network

  # Mock OAuth2/JWKS Server usando Nginx.
  mock-oauth2-server:
    profiles: ["oauth_mock"] 
    image: nginx:1.25.5-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-mock-oauth
    ports:
      - "8089:80" 
    volumes:
      - ./tests/resources/mock_jwks.json:/usr/share/nginx/html/.well-known/jwks.json:ro
      - ./scripts/nginx-mock-oauth2.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f -s http://localhost/livez > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s 
    networks:
      - typedb_mcp_test_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  vault:
    profiles: ["vault_integration"]
    image: vault:latest
    container_name: ${COMPOSE_PROJECT_NAME}-vault
    ports:
      - "8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root-token-for-tests
    command: server -dev
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://127.0.0.1:8200"]
      interval: 5s
      timeout: 2s
      retries: 10
    networks:
      - typedb_mcp_test_network

networks:
  typedb_mcp_test_network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME}_typedb_mcp_test_network 

volumes:
  typedb_data_it: 
    name: ${COMPOSE_PROJECT_NAME}_typedb_data_it 
  typedb_tls_data_it:
    name: ${COMPOSE_PROJECT_NAME}_typedb_tls_data_it

secrets:
  mcp_approle_role_id:
    file: ./test-secrets/role_id.txt
  mcp_approle_secret_id:
    file: ./test-secrets/secret_id.txt

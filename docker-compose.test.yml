# docker-compose.test.yml
#
# Arquivo Docker Compose para o ambiente de teste de integração do Typedb-MCP-Server.
#
# Modificações nesta versão:
# - O `command` do serviço `typedb-mcp-server-it` foi aprimorado com:
#   - Logs de depuração mais claros.
#   - Um loop de espera robusto para a porta TCP do TypeDB (`typedb-server-it:1729`).
#   - Um `sleep 7` (configurável) APÓS a porta TCP do TypeDB ser detectada como aberta,
#     para dar tempo ao serviço gRPC interno do TypeDB de se inicializar completamente
#     antes que o Typedb-MCP-Server tente se conectar.
# - A seção `depends_on` do `typedb-mcp-server-it` foi simplificada para focar
#   apenas nas dependências que são sempre ativadas ou cujo healthcheck é crucial
#   antes do script de comando interno (a ser ajustado na Fase 2 com perfis).

# Variáveis de ambiente padrão para evitar warnings
x-default-variables: &default-env
  MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV: ${MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV:-/app/test_configs/default.test.toml}
  MCP_TYPEDB__ADDRESS: ${MCP_TYPEDB__ADDRESS:-typedb-server-it:1729}
  target_typedb_host_port: ${target_typedb_host_port:-typedb-server-it:1729}
  timeout_duration: ${timeout_duration:-120}
  target_typedb_service_name: ${target_typedb_service_name:-typedb-server-it}
  sleep_interval: ${sleep_interval:-3}
  elapsed_time: ${elapsed_time:-0}

version: '3.8'

services:
  # Serviço principal Typedb-MCP-Server para testes
  typedb-mcp-server-it:
    profiles: ["typedb_default", "typedb_tls", "oauth_mock"] # Disponível em todos os profiles
    build:
      context: . 
      dockerfile: Dockerfile 
    container_name: ${COMPOSE_PROJECT_NAME}-mcp-server 
    ports:
      - "8788:8787"   # HTTP/WS MCP (Host:Container)
      - "8444:8443"   # HTTPS/WSS MCP (Host:Container)
      - "9091:9090"   # Métricas Prometheus (Host:Container)
    volumes:
      - ../tests/test_configs:/app/test_configs:ro
      - ../tests/test_certs:/app/test_certs:ro
    environment:
      # MCP_CONFIG_PATH: Substituído pelo Docker Compose usando MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV do host.
      - MCP_CONFIG_PATH=${MCP_CONFIG_PATH_FOR_TEST_CONTAINER_HOST_ENV}
      - RUST_LOG=${RUST_LOG_MCP:-info,typedb_mcp_server_lib=trace,typedb_mcp_server=trace,typedb_mcp_server_lib::config=trace,typedb_driver=info,hyper=warn,h2=warn,tower=warn}
      - TYPEDB_PASSWORD=${TYPEDB_PASSWORD_TEST:-password}
      # MCP_TYPEDB__ADDRESS: Define o endereço do TypeDB para o processo Rust.
      - MCP_TYPEDB__ADDRESS=typedb-server-it:1729
    
    command: >
      sh -c "
        echo '[DEBUG_MCP_SERVER_CMD] Script de entrada iniciado.'
        echo '[DEBUG_MCP_SERVER_CMD] Verificando variáveis de ambiente recebidas pelo contêiner:'
        echo '[DEBUG_MCP_SERVER_CMD]   MCP_CONFIG_PATH = \"$MCP_CONFIG_PATH\"'
        echo '[DEBUG_MCP_SERVER_CMD]   MCP_TYPEDB__ADDRESS = \"$MCP_TYPEDB__ADDRESS\"'
        echo '[DEBUG_MCP_SERVER_CMD]   TYPEDB_PASSWORD (para TypeDB Client) = \"$TYPEDB_PASSWORD\"'
        
        target_typedb_service_name=\"typedb-server-it\" # Usado nos logs
        target_typedb_host_port=\"typedb-server-it:1729\" # Host e porta para o netcat
        timeout_duration=120 # Segundos de timeout total para esperar pelo TypeDB
        elapsed_time=0
        sleep_interval=3   # Intervalo entre tentativas de conexão TCP
        
        echo \"[DEBUG_MCP_SERVER_CMD] Iniciando espera ativa pela porta TCP do TypeDB em \${target_typedb_host_port}...\"
        
        until nc -z -w 2 typedb-server-it 1729; do # -w 2: timeout de 2s para nc
          if [ \$$elapsed_time -ge \$$timeout_duration ]; then
            echo \"[ERROR_MCP_SERVER_CMD] Timeout de \${timeout_duration}s atingido ao aguardar TypeDB em \${target_typedb_host_port}! O servidor TypeDB ('\${target_typedb_service_name}') pode não ter iniciado corretamente ou não estar acessível na rede interna do Docker.\" >&2
            exit 1; 
          fi
          echo \"[DEBUG_MCP_SERVER_CMD] TypeDB (\${target_typedb_host_port}) ainda não disponível (TCP port check). Aguardando \${sleep_interval}s... (\${elapsed_time}/\${timeout_duration}s)\"
          sleep \$$sleep_interval
          elapsed_time=\$((elapsed_time + sleep_interval))
        done
        
        echo \"[DEBUG_MCP_SERVER_CMD] Porta TCP do TypeDB (\${target_typedb_host_port}) está aberta e aceitando conexões.\"
        echo \"[DEBUG_MCP_SERVER_CMD] Adicionando um delay extra de 7 segundos para garantir que o serviço gRPC interno do TypeDB esteja completamente inicializado...\"
        sleep 7 
        
        echo \"[DEBUG_MCP_SERVER_CMD] Iniciando o binário Typedb-MCP-Server (/usr/local/bin/typedb_mcp_server)...\"
        /usr/local/bin/typedb_mcp_server
      "
    
    # depends_on: Gerencia a ordem de inicialização dos contêineres.
    # O `--wait` no comando `docker compose up` usará os healthchecks.
    # O script de comando acima adiciona uma espera mais granular pela porta TCP do TypeDB.
    # FASE 1: Dependências mínimas apenas para o profile "typedb_default"
    depends_on:
      typedb-server-it:
         condition: service_healthy
    networks:
      - typedb_mcp_test_network
    # O Healthcheck do Dockerfile principal (verifica /livez) ainda se aplica.

  # Instância do TypeDB Server para testes (sem TLS)
  typedb-server-it:
    profiles: ["typedb_default"] # Perfil para este serviço
    image: typedb/typedb:3.2.0
    container_name: ${COMPOSE_PROJECT_NAME}-typedb
    ports:
      - "1729:1729" 
    environment:
      - TYPEDB_SERVER_OPTS=--server.address=0.0.0.0:1729 --server.authentication.enable=true --server.credential.default.password=${TYPEDB_PASSWORD_TEST:-password}
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/1729' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s # Reduzido um pouco, pois o script do MCP server tem uma espera longa
    networks:
      - typedb_mcp_test_network
    volumes:
      - typedb_data_it:/opt/typedb/server/data

  # Instância do TypeDB Server para testes (COM TLS)
  typedb-server-tls-it:
    profiles: ["typedb_tls"] # Perfil para este serviço
    image: typedb/typedb:3.2.0
    container_name: ${COMPOSE_PROJECT_NAME}-typedb-tls
    ports:
      - "11730:1729" 
    volumes:
      - ../tests/test_certs/typedb-server.crt:/opt/typedb/server/conf/typedb-server.crt:ro
      - ../tests/test_certs/typedb-server.key:/opt/typedb/server/conf/typedb-server.key:ro
      - ../tests/test_certs/rootCA.pem:/opt/typedb/server/conf/rootCA.pem:ro
      - typedb_tls_data_it:/opt/typedb/server/data
    environment:
      - TYPEDB_SERVER_OPTS=--server.address=0.0.0.0:1729 --server.authentication.enable=true --server.credential.default.password=${TYPEDB_PASSWORD_TEST:-password} --server.encryption.enable=all --server.encryption.certificate.path=/opt/typedb/server/conf/typedb-server.crt --server.encryption.private_key.path=/opt/typedb/server/conf/typedb-server.key --server.encryption.ca.path=/opt/typedb/server/conf/rootCA.pem
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/1729' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 35s # Um pouco mais devido à configuração TLS
    networks:
      - typedb_mcp_test_network

  # Mock OAuth2/JWKS Server usando Nginx
  mock-oauth2-server:
    profiles: ["oauth_mock"] # Perfil para este serviço
    image: nginx:1.25.5-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-mock-oauth
    ports:
      - "8089:80" 
    volumes:
      - ../tests/resources/mock_jwks.json:/usr/share/nginx/html/.well-known/jwks.json:ro
      - ./scripts/nginx-mock-oauth2.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f -s http://localhost/livez > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s # Geralmente rápido para iniciar
    networks:
      - typedb_mcp_test_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Rede customizada para isolar os serviços de teste.
networks:
  typedb_mcp_test_network:
    driver: bridge

# Volumes nomeados para persistência de dados do TypeDB.
volumes:
  typedb_data_it: {} 
  typedb_tls_data_it: {}
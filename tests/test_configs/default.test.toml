# Arquivo: tests/test_configs/default.test.toml
# Propósito: Configuração base para testes de integração do Typedb-MCP-Server.
# Esta versão utiliza chaves em `camelCase` para alinhar com as diretivas
# `#[serde(rename_all = "camelCase")]` nas structs de configuração em `src/config.rs`.
#
# Cenário de Teste para o qual este arquivo é geralmente usado:
# - OAuth2: Desabilitado.
# - TLS para o servidor MCP: Desabilitado (o servidor MCP escuta em HTTP/WS).
# - Conexão do servidor MCP com TypeDB: Sem TLS, apontando para o serviço Docker 'typedb-server-it'.

# Configurações do próprio Typedb-MCP-Server.
[server]
# Endereço de bind (IP:PORTA) INTERNO ao contêiner para o servidor MCP.
# O servidor escutará em todas as interfaces neste IP e porta.
# Default em src/config.rs é "0.0.0.0:8787".
bindAddress = "0.0.0.0:8787"

# Endereço de bind (IP:PORTA) INTERNO ao contêiner para o endpoint de métricas Prometheus.
# Default em src/config.rs (via main.rs) é "0.0.0.0:9090".
metricsBindAddress = "0.0.0.0:9090"

# Caminho do endpoint WebSocket MCP.
# Default em src/config.rs (via main.rs) é "/mcp/ws".
mcpWebsocketPath = "/mcp/ws"

# Caminho do endpoint de métricas Prometheus.
# Default em src/config.rs (via main.rs) é "/metrics".
metricsPath = "/metrics"

# Habilita TLS (HTTPS/WSS) para o servidor MCP.
# Default em src/config.rs é false.
tlsEnabled = false

# Caminho DENTRO do contêiner para o arquivo PEM do certificado do servidor MCP (fullchain).
# Obrigatório e deve ser um caminho válido se `server.tlsEnabled = true`.
# Exemplo para testes: "/app/test_certs/mcp-server.crt" (se montado).
# tlsCertPath = "/app/test_certs/mcp-server.crt"

# Caminho DENTRO do contêiner para o arquivo PEM da chave privada do servidor MCP.
# Obrigatório e deve ser um caminho válido se `server.tlsEnabled = true`.
# Exemplo para testes: "/app/test_certs/mcp-server.key"
# tlsKeyPath = "/app/test_certs/mcp-server.key"

# Número de threads worker para o runtime Tokio.
# Se omitido ou null, o servidor usará o número de CPUs lógicas disponíveis.
# Default em src/config.rs é None.
# workerThreads = 4


# Configurações para a conexão do Typedb-MCP-Server com o banco de dados TypeDB.
[typedb]
# Endereço do servidor TypeDB. Para testes de integração, este é o nome do serviço
# TypeDB na rede Docker interna (ex: "typedb-server-it:1729").
# Default em src/config.rs é "localhost:1729".
address = "typedb-server-it:1729" # Valor crucial para os testes de integração.

# Nome de usuário para autenticação com TypeDB.
# Default em src/config.rs é Some("admin").
username = "admin"
# A SENHA DO TYPEDB (`TYPEDB_PASSWORD`) DEVE ser fornecida via variável de ambiente
# (TYPEDB_PASSWORD_TEST para docker-compose.test.yml).

# Habilita (true) ou desabilita (false) TLS para a conexão com o servidor TypeDB.
# Default em src/config.rs é false.
tlsEnabled = false

# Caminho DENTRO do contêiner do MCP Server para o arquivo PEM do certificado da
# Autoridade Certificadora (CA) raiz.
# Usado para verificar o certificado do servidor TypeDB se `typedb.tlsEnabled = true`
# e o TypeDB Server usar uma CA customizada ou autoassinada.
# Default em src/config.rs é None.
# Exemplo para testes: "/app/test_certs/rootCA.pem" (se montado).
# tlsCaPath = "/app/test_certs/rootCA.pem"


# Configurações de autenticação OAuth 2.0 para os clientes que se conectam ao Typedb-MCP-Server.
[oauth]
# Habilita (true) ou desabilita (false) a autenticação OAuth2.
# Default em src/config.rs é false.
enabled = false

# URI do endpoint JWKS (JSON Web Key Set) do Authorization Server.
# Obrigatório se `oauth.enabled = true`.
# Para testes com OAuth, apontaria para o `mock-oauth2-server`.
# Ex: "http://mock-oauth2-server/.well-known/jwks.json"
# jwksUri = ""

# Issuer(s) esperado(s) no token JWT (claim "iss"). Pode ser uma lista de strings.
# Se definido, o token será validado contra estes valores.
# Default em src/config.rs é None.
# Ex: issuer = ["https://meu-auth-server.com"]
# issuer = []

# Audience(s) esperado(s) no token JWT (claim "aud"). O token deve conter um destes.
# Se definido, o token será validado contra estes valores. Pode ser uma lista de strings.
# Default em src/config.rs é None.
# Ex: audience = ["api://meu-mcp-server"]
# audience = []

# Lista de escopos OAuth2 que um token DEVE conter para acesso geral ao servidor.
# Se não definido ou vazio, nenhum escopo específico é exigido para funcionalidades básicas.
# A autorização granular por ferramenta MCP pode impor requisitos de escopo adicionais.
# Default em src/config.rs é None.
# Ex: requiredScopes = ["mcp:access", "typedb:read"]
# requiredScopes = []

# Intervalo para recarregar o JWKS do Authorization Server.
# Formato: string legível por humanos (ex: "1h", "30m", "3600s").
# Este valor é para `jwks_refresh_interval_raw` na struct Settings.
# Default programático (via DEFAULT_JWKS_REFRESH_INTERVAL_STR) é "1h".
jwksRefreshInterval = "1h"

# Timeout em segundos para a requisição HTTP ao buscar o JWKS.
# Default em src/config.rs é Some(30).
# jwksRequestTimeoutSeconds = 10


# Configurações de logging para a aplicação.
[logging]
# String de configuração para o filtro de log do `tracing_subscriber`
# (ex: "info,typedb_mcp_server_lib=debug,typedb_driver=trace").
# Default em src/config.rs é "info,typedb_mcp_server_lib=info,typedb_driver=info".
rustLog = "info,typedb_mcp_server_lib=debug,typedb_mcp_server=debug,typedb_mcp_server_lib::config=trace,typedb_driver=info,hyper=warn,h2=warn,tower=warn"


# Configurações de CORS (Cross-Origin Resource Sharing).
[cors]
# Lista de origens permitidas para acessar o servidor MCP.
# Usar `["*"]` permite todas as origens (adequado para testes, mas NÃO para produção sem análise).
# Default em src/config.rs é `vec!["*".to_string()]`.
allowedOrigins = ["*"]


# Configurações de Limitação de Taxa (Rate Limiting) por IP.
[rateLimit] # A seção no TOML deve corresponder ao `rename = "rateLimit"` em `Settings` ou ser `rate_limit` se não houver rename.
# Habilita (true) ou desabilita (false) o rate limiting.
# Default em src/config.rs é true.
enabled = true

# Número de requisições (ou novas conexões) permitidas por segundo, por IP.
# Default em src/config.rs é Some(100).
requestsPerSecond = 1000 # Valor alto para não interferir em testes normais

# Número de requisições permitidas em um burst (rajada), por IP.
# Default em src/config.rs é Some(200).
burstSize = 2000


# Configurações para Tracing Distribuído (OpenTelemetry).
[tracing]
# Habilita (true) ou desabilita (false) o tracing OpenTelemetry.
# Default em src/config.rs é false.
enabled = false

# Endpoint do coletor OTLP (geralmente gRPC).
# Obrigatório se `tracing.enabled = true`.
# Default em src/config.rs é None.
# Ex: "http://localhost:4317" (para um coletor OTLP/gRPC local).
# exporterOtlpEndpoint = ""

# Nome do serviço que aparecerá no sistema de tracing.
# Default em src/config.rs é "typedb-mcp-server".
serviceName = "typedb-mcp-server-test-default"

# Estratégia de amostragem para traces.
# Valores comuns: "always_on", "always_off", "traceidratio".
# Default em src/config.rs é "always_on".
sampler = "always_on"

# Argumento para o sampler.
# Para "traceidratio", é a taxa (ex: "0.1" para 10% de traces).
# Para "always_on" ou "always_off", geralmente "1.0" ou não é usado.
# Default em src/config.rs é "1.0".
samplerArg = "1.0"
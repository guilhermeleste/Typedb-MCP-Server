[package]
name = "typedb_mcp_server"
version = "0.1.0"
edition = "2021"
authors = ["Guilherme Leste <luiz.leste@gmail.com>"]
description = "Servidor MCP (Model Context Protocol) para interagir com TypeDB, com foco em segurança via TLS/OAuth2 e transporte WebSocket."
repository = "https://github.com/guilhermeleste/Typedb-MCP-Server"
license = "MIT"
readme = "README.md"
keywords = ["mcp", "typedb", "database", "websocket", "oauth2", "server", "rust", "ai", "llm"]
categories = ["database", "network-programming", "web-programming::http-server", "api-bindings"]
rust-version = "1.87.0"

[dependencies]

axum-server = { version = "0.6", features = ["tls-rustls"] }
async-trait = "0.1.88"
axum = { version = "0.8.4", features = ["ws", "macros", "json"] }
axum-extra = { version = "0.10.1", features = ["typed-header"] }
bytes = "1.10.1"
config = { version = "0.15.11", features = ["toml"] }
dotenvy = "0.15.7"
futures = "0.3.31"
futures-util = "0.3.31"
humantime-serde = "1.1.1"
hyper = { version = "1.6.0", features = ["server", "http1"] }
hyper-util = { version = "0.1.11", features = ["server", "tokio", "server-auto", "server-graceful"] }
jsonwebtoken = { version = "9.3.1", features = ["use_pem"] }
matchit = "0.8.4"
metrics = "0.24.2"
metrics-exporter-prometheus = { version = "0.17.0", features = ["http-listener"] }
num_cpus = "1.16.0"
oauth2 = "5.0.0"
opentelemetry = { version = "0.29.1", features = ["trace", "tracing"] }
opentelemetry-otlp = { version = "0.29.0", features = ["tonic", "grpc-tonic"] }
opentelemetry-semantic-conventions = "0.29.0"
opentelemetry_sdk = { version = "0.29.0", features = ["rt-tokio", "trace"] }
percent-encoding = "2.3.1"
pin-project-lite = "0.2.16"
reqwest = { version = "0.12.15", default-features = false, features = ["json", "rustls-tls"] }
rmcp = { git = "https://github.com/modelcontextprotocol/rust-sdk", branch = "main", version = "0.1.5", features = ["server", "macros", "transport-async-rw", "auth", "macros"] }
rustls = "0.23.27"
rustls-pemfile = "2.2.0"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
thiserror = "2.0.12"
tokio = { version = "1.45.0", features = ["full"] }
tokio-rustls = "0.26.2"
tokio-util = { version = "0.7.15", features = ["codec"] }
toml = "0.8.22"
tower = { version = "0.5.2", features = ["full"] }
tower-http = { version = "0.6.4", features = ["cors", "trace", "request-id", "sensitive-headers"] }
tracing = "0.1.41"
tracing-opentelemetry = "0.30.0"
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "fmt", "json", "registry"] }
typedb-driver = "3.2.0"
uuid = { version = "1.16.0", features = ["v4", "serde"] }
humantime = "2.2.0"


[dev-dependencies]
assert-json-diff = "2.0.2"
chrono = "0.4.41"
cucumber = "0.21.1"
cucumber-codegen = "0.21.1"
mockito = "1.7.0"
mockall = "0.13.1"
predicates = "3.1.3"
rand = "0.9.1"
reqwest = { version = "0.12.15", default-features = false, features = ["blocking", "json"] }
rsa = { version = "0.9.8", features = ["pem"] }
tempfile = "3.20.0"
tokio-tungstenite = { version = "0.26.2", features = ["rustls-tls-native-roots"] }
wiremock = "0.6.3"
serial_test = "3.2.0"
http = "1.3.1"
url = "2.5.4"
base64 = "0.22.1"


[profile.dev]

opt-level = 0
debug = true
panic = "unwind"

[profile.release]

opt-level = 3
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true
debug = false

[profile.test]

opt-level = 1
debug = true



[[bin]]
name = "typedb_mcp_server"
path = "src/main.rs"

[lib]
name = "typedb_mcp_server_lib"
path = "src/lib.rs"

[lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"
unreachable_pub = "warn"
# Removido rust_2018_idioms e rust_2021_compatibility pois podem ser gerenciados pela edition ou causar ruído.

[lints.clippy]
# Ativar todos os lints pedantic como avisos por padrão.
# Isso nos força a ser muito explícitos sobre o código.
# Lints individuais podem ser permitidos ou negados abaixo, conforme necessário.
pedantic = { level = "warn", priority = -1 } # Modificado para definir prioridade

# Lints específicos para permitir (allow), avisar (warn), ou negar (deny).
# Permissões (allow):
clone_on_copy = "deny"
# expl_impl_locale_aware_cmp = "deny" # Lint desconhecido ou obsoleto
float_cmp = "deny"
mutex_integer = "deny"
unnecessary_unwrap = "deny"
unwrap_used = "deny" # Manter como deny para produção

# Lints para avisar
default_trait_access = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
manual_ok_or = "warn"
map_unwrap_or = "warn"
match_same_arms = "warn"
redundant_else = "warn"
string_to_string = "warn"
redundant_clone = "warn"
expect_used = "warn" # Avisar sobre expect, incentivar tratamento de erro mais robusto
print_stdout = "warn"
print_stderr = "warn"
# cyclomatic_complexity = "warn" # Usar cognitive_complexity em clippy.toml
# too_many_arguments = "warn" # Configurado via threshold em clippy.toml
# main.py

"""
Ponto de entrada principal para o TypeDB Sentinel.

Este script fornece uma interface de linha de comando (CLI) para iniciar
o workflow de teste aut√¥nomo. Ele carrega as configura√ß√µes, instancia o
workflow e executa um cen√°rio de teste com base na entrada do usu√°rio.

Exemplos de uso:
  # Executa um teste de funcionalidade padr√£o
  python main.py "Testar a cria√ß√£o e consulta de um banco de dados."

  # Executa um teste de seguran√ßa com um token de permiss√µes limitadas
  python main.py "Tentar deletar um banco de dados com um token de leitura." --security-test

  # Executa o workflow com um ID de sess√£o espec√≠fico para retomar um teste anterior
  python main.py "Continuar teste de migra√ß√£o" --session-id "workflow-migracao-123"
"""

import asyncio
from pathlib import Path
from typing import Optional

import typer
from agno.storage.sqlite import SqliteStorage
from agno.utils.log import logger

# Importa os componentes principais da nossa aplica√ß√£o
from config import settings
from src.toolkit.typedb_toolkit import TypeDBConfig
from src.workflows.test_workflow import TestExecutionWorkflow

# Cria a aplica√ß√£o CLI com Typer
app = typer.Typer(
    name="TypeDB Sentinel",
    help="Um sistema de teste aut√¥nomo para o typedb-mcp-server usando Agno e Gemini.",
    add_completion=False,
)

# Cria o diret√≥rio de dados se ele n√£o existir
data_dir = Path("./data")
data_dir.mkdir(exist_ok=True)


@app.command()
def run(
    test_description: str = typer.Argument(
        ..., help="Descri√ß√£o em linguagem natural do cen√°rio de teste a ser executado."
    ),
    security_test: bool = typer.Option(
        False,
        "--security-test",
        "-s",
        help="Executa o teste usando o token de seguran√ßa com escopo limitado.",
    ),
    session_id: Optional[str] = typer.Option(
        None,
        "--session-id",
        help="ID de uma sess√£o existente para retomar um workflow interrompido.",
    ),
    output_dir: Path = typer.Option(
        Path("./reports"),
        "--output-dir",
        "-o",
        help="Diret√≥rio onde o relat√≥rio de teste final ser√° salvo.",
    ),
):
    """
    Inicia e executa o workflow de teste do TypeDB Sentinel.
    """
    logger.info("üöÄ Iniciando o TypeDB Sentinel...")

    # --- Configura√ß√£o dos Toolkits ---
    admin_config = TypeDBConfig(
        server_url=settings.TYPEDB_SERVER_URL,
        auth_token=settings.TYPEDB_ADMIN_TOKEN,
        tls_ca_path=settings.TYPEDB_TLS_CA_PATH,
    )
    
    security_config = None
    if security_test:
        if not settings.TYPEDB_SECURITY_TOKEN:
            logger.error("O token de seguran√ßa (TYPEDB_SECURITY_TOKEN) n√£o est√° definido no ambiente. Abortando.")
            raise typer.Exit(code=1)
        security_config = TypeDBConfig(
            server_url=settings.TYPEDB_SERVER_URL,
            auth_token=settings.TYPEDB_SECURITY_TOKEN,
            tls_ca_path=settings.TYPEDB_TLS_CA_PATH,
        )

    # --- Configura√ß√£o do Workflow ---
    workflow_storage = SqliteStorage(
        table_name="sentinel_workflows", db_file=str(data_dir / "sentinel_workflows.db")
    )
    
    workflow = TestExecutionWorkflow(
        admin_config=admin_config,
        security_config=security_config,
        session_id=session_id,
        storage=workflow_storage,
        debug_mode=True # Habilita logs detalhados do Agno
    )

    logger.info(f"ID da Sess√£o do Workflow: {workflow.session_id}")

    # --- Execu√ß√£o Ass√≠ncrona ---
    try:
        final_report = asyncio.run(workflow.arun(test_description))

        # --- Salvando o Relat√≥rio ---
        output_dir.mkdir(exist_ok=True)
        report_path = output_dir / f"TestReport_{workflow.session_id}.md"
        report_path.write_text(final_report.markdown_content)
        
        # CORRIGIDO: Removido f-string desnecess√°rio
        logger.info("‚úÖ Workflow conclu√≠do com sucesso!")
        logger.info(f"üìÑ Relat√≥rio salvo em: {report_path}")

    except Exception as e:
        logger.error(f"‚ùå O workflow falhou com um erro cr√≠tico: {e}")
        raise typer.Exit(code=1)


if __name__ == "__main__":
    app()
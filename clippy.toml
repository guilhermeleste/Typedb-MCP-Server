# Dentro do seu Cargo.toml

[lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"    # Avisar sobre documentação faltando em itens públicos
unreachable_pub = "warn" # Avisar sobre itens `pub` que não são exportados ou usados no crate
rust_2018_idioms = "warn" # Garante que o código siga os idiomas modernos do Rust
rust_2021_compatibility = "warn" # Avisa sobre construções que não são compatíveis com 2021 (se a edição for 2021)

[lints.clippy]
# --- Nível Deny (Erros que DEVEM ser corrigidos, pois podem levar a bugs) ---
clone_on_copy = "deny" # Evita clones desnecessários em tipos Copy
"expl_impl_ ભારત_aware_cmp" = "deny" # Garante comparações corretas com unicode
float_cmp = "deny"             # Previne comparações diretas de float imprecisas
get_unwrap = "deny"            # Força o tratamento de Option/Result em vez de unwrap diretamente
mutex_integer = "deny"         # Evita Mutex em tipos inteiros simples onde atomics são melhores
unnecessary_unwrap = "deny"    # Avisa se unwrap é feito em algo que não pode falhar
# Outros denies importantes para robustez:
invalid_regex = "deny"
mem_forget = "deny" # Previne vazamentos de memória com mem::forget
multiple_inherent_impl = "deny" # Ajuda a manter a estrutura do código clara
panic_in_result_fn = "deny" # Funções Result não devem entrar em pânico, devem retornar Err
# --- Nível Warn (Fortemente Recomendados para Correção para qualidade e clareza) ---
pedantic = { level = "warn", priority = -1 } # Habilita o grupo pedantic, bom ponto de partida
#   Desabilitar lints específicos do pedantic que são muito barulhentos ou contraproducentes para ESTE projeto.
#   Esta lista DEVE ser refinada após as primeiras execuções do clippy no código real.
#   A ausência de 'allow' aqui significa que inicialmente todos os 'pedantic' serão avisos.
#   Exemplos do que PODE ser necessário desabilitar se forem muito invasivos inicialmente:
#   allow = [
#       "clippy::module_name_repetitions", # Preferência de estilo
#       "clippy::missing_errors_doc",      # `missing_docs` no rustc já cobre parte disso
#       "clippy::implicit_return",         # Preferência de estilo (return explícito vs implícito)
#       "clippy::must_use_candidate",      # Pode ser muito verboso para todas as funções
#       "clippy::similar_names",           # Pode ter falsos positivos
#       "clippy::struct_excessive_bools",  # Avaliar caso a caso
#       "clippy::too_many_lines",          # Definido separadamente abaixo
#       "clippy::doc_markdown",            # Pode ser muito específico com a formatação do markdown
#   ]

# Lints de Estilo/Clareza Específicos (reforçando ou complementando pedantic)
default_trait_access = "warn" # Seja explícito sobre o acesso a membros de traits
empty_structs_with_brackets = "warn" # Estilo consistente para structs vazias
manual_let_else = "warn" # Sugere usar a construção `let ... else` mais nova
map_unwrap_or = "warn" # Prefira `.map(...).unwrap_or_else(...)` ou similar
match_bool = "warn" # Evite `if x == true`
match_same_arms = "warn" # Braços de match idênticos podem ser um erro
redundant_else = "warn" # `else` desnecessário
string_to_string = "warn" # Evita `some_string.to_string()` desnecessário
semicolon_if_nothing_returned = "warn" # Ajuda a evitar confusão com valor de retorno implícito

# Lints de Performance (básicos e geralmente seguros)
redundant_clone = "warn"
inefficient_to_string = "warn"

# Lints de Uso (reforçando cautela com `expect` e `unwrap`)
expect_used = "warn" # Use `expect` com uma mensagem que justifique o panic.
unwrap_used = "warn" # Evite `unwrap`; prefira tratamento de erro explícito ou `expect` justificado.

# Lints para código de servidor/biblioteca
print_stdout = "warn" # Servidores devem usar logging (tracing)
print_stderr = "warn" # Servidores devem usar logging (tracing)

# Limites (estes são aplicados como 'warn', mas o CI pode tratá-los como erros)
too_many_arguments = { level = "warn", args = ["threshold=7"] }
cyclomatic_complexity = { level = "warn", args = ["threshold=25"] } # Limiar para complexidade ciclomática
too_many_lines = { level = "warn", args = ["threshold=150"] } # Limiar para linhas por função